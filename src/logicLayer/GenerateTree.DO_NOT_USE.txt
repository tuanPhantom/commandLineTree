    // way 1: CompletableFuture
//    private static CompletableFuture<Tree<File>> buildTreeAsync(File directory) {
//        return CompletableFuture.supplyAsync(() -> {
//            Tree<File> tree = new Tree<>();
//            if (directory != null && directory.isDirectory()) {
//                tree.add(directory);
//                File[] files = directory.listFiles();
//                if (files != null) {
//                    for (File f : files) {
//                        tree.add(f);
//                        tree.addAll(buildTreeAsync(f).join());
//                    }
//                }
//            }
//            return tree;
//        });
//    }
//
//    public static String displayFilesAsync(File file, boolean stylize) {
//        CompletableFuture<Tree<File>> treeFuture = buildTreeAsync(file);
//        treeFuture.thenAccept(tree -> {
//            // Do something with the tree, such as print its size
//            System.out.println("haha");
//        });
//        // Wait for the tree to be built
//        try {
//            return treeFuture.get().toString(stylize);
//        } catch (InterruptedException | ExecutionException e) {
//            e.printStackTrace();
//        } finally {
//            measurement();
//        }
//        return null;
//    }


    // way 2: Enhance CompletableFuture
//    private static CompletableFuture<Tree<File>> buildTreeAsync(File directory) {
//        return CompletableFuture.supplyAsync(() -> {
//            Tree<File> tree = new Tree<>();
//            if (directory != null && directory.isDirectory()) {
//                tree.add(directory);
//                File[] files = directory.listFiles();
//                if (files != null) {
//                    CompletableFuture<Tree<File>>[] childFutures = new CompletableFuture[files.length];
//                    for (int i = 0; i < files.length; i++) {
//                        int finalI = i;
//                        childFutures[i] = CompletableFuture.supplyAsync(() -> {
//                            Tree<File> childTree = new Tree<>();
//                            childTree.add(files[finalI]);
//                            if (files[finalI].isDirectory()) {
//                                childTree.addAll(buildTreeAsync(files[finalI]).join());
//                            }
//                            return childTree;
//                        });
//                    }
//
//                    for (CompletableFuture<Tree<File>> childFuture : childFutures) {
//                        try {
//                            tree.addAll(childFuture.get());
//                        } catch (InterruptedException | ExecutionException e) {
//                            e.printStackTrace();
//                        }
//                    }
//                }
//            }
//            return tree;
//        });
//    }
//
//    public static String displayFilesAsync(File file, boolean stylize) {
//        CompletableFuture<Tree<File>> treeFuture = buildTreeAsync(file);
//        treeFuture.thenAccept(tree -> {
//            // Do something with the tree, such as print its size
//            System.out.println("haha");
//        });
//        // Wait for the tree to be built
//        try {
//            return treeFuture.get().toString(stylize);
//        } catch (InterruptedException | ExecutionException e) {
//            e.printStackTrace();
//        } finally {
//            measurement();
//        }
//        return null;
//    }

    // way 3: Executor
//    private static ExecutorService executor;
//
//    private static void reset() {
//        if (executor == null || executor.isShutdown()) {
//            executor = Executors.newFixedThreadPool(Integer.MAX_VALUE);
//        }
//    }
//
//    private static CompletableFuture<Tree<File>> buildTreeAsync(File directory) {
//        return CompletableFuture.supplyAsync(() -> {
//            Tree<File> tree = new Tree<>();
//            if (directory != null && directory.isDirectory()) {
//                tree.add(directory);
//                File[] files = directory.listFiles();
//                if (files != null) {
//                    CompletableFuture<Tree<File>>[] childFutures = new CompletableFuture[files.length];
//                    for (int i = 0; i < files.length; i++) {
//                        int finalI = i;
//                        childFutures[i] = CompletableFuture.supplyAsync(() -> {
//                            Tree<File> childTree = new Tree<>();
//                            childTree.add(files[finalI]);
//                            if (files[finalI].isDirectory()) {
//                                childTree.addAll(buildTreeAsync(files[finalI]).join());
//                            }
//                            return childTree;
//                        }, executor);
//                    }
//
//                    for (CompletableFuture<Tree<File>> childFuture : childFutures) {
//                        try {
//                            tree.addAll(childFuture.get());
//                        } catch (InterruptedException | ExecutionException e) {
//                            e.printStackTrace();
//                        }
//                    }
//                }
//            }
//            return tree;
//        }, executor);
//    }
//
//    public static String displayFilesAsync(File file, boolean stylize) {
//        reset();
//        CompletableFuture<Tree<File>> treeFuture = buildTreeAsync(file);
//        treeFuture.thenAccept(tree -> {
//            // Do something with the tree, such as print its size
//            System.out.println("Total threads: " + ((ThreadPoolExecutor) executor).getLargestPoolSize());
//        });
//        // Wait for the tree to be built
//        try {
//            return treeFuture.get().toString(stylize);
//        } catch (InterruptedException | ExecutionException e) {
//            e.printStackTrace();
//        } finally {
//            measurement();
//            executor.shutdown();
//        }
//        return null;
//    }